{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Danil-Kabanov/Google-colabs/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%201.0.0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ФИО:"
      ],
      "metadata": {
        "id": "fLDS5f_mCnPa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание (совместное с преподавателем)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-CSHUbWzCqeM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n",
        "Для этого создайте класс Employee со следующими методами:\n",
        "\n",
        "- Метод consume_vacation должен отвечать за списание дней отпуска.\n",
        "\n",
        "Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n",
        "\n",
        "При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n",
        "\n",
        "Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n",
        "\n",
        "- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n",
        "\n",
        "\n",
        "Чтобы проверить работу программы:\n",
        "1. Создайте экземпляр класса Employee.\n",
        "2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n",
        "3. Вызовите метод get_vacation_details."
      ],
      "metadata": {
        "id": "a_flBjZOCwYz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Employee:\n",
        "    vacation_days = 28\n",
        "\n",
        "\n",
        "    def __init__(self, first_name, second_name, gender):\n",
        "        self.first_name = first_name\n",
        "        self.second_name = second_name\n",
        "        self.gender = gender\n",
        "        self.remaining_vacation_days = self.vacation_days\n",
        "\n",
        "    # вычетание отгуляных дней\n",
        "    def consume_vacation(self, days):\n",
        "        self.remaining_vacation_days -= days\n",
        "\n",
        "    def vacation_details(self):\n",
        "        return f'Остаток отпускных дней: {self.remaining_vacation_days}.'\n",
        "\n",
        "\n",
        "employee = Employee(\"Олег\", \"Крутой\", \"м\")\n",
        "employee2 = Employee(\"Олег\", \"не очень Крутой\", \"м\")\n",
        "\n",
        "\n",
        "print(employee.first_name)"
      ],
      "metadata": {
        "id": "G4bUraN4CwBI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "405efc39-8bc9-40c8-c131-ec6d9dfba73f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Олег\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 1"
      ],
      "metadata": {
        "id": "8XGka5GtEBK1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание:\n",
        "\n",
        "Создайте класс с именем Rectangle который имеет:\n",
        "- Атрибуты ширины и высоты.\n",
        "- Метод расчета площади.\n",
        "- Метод расчета периметра.\n",
        "- Метод отображения размеров прямоугольника.\n",
        "\n",
        "Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."
      ],
      "metadata": {
        "id": "jQ4qqd8nEZBY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "    def __init__(self, length, width):\n",
        "        self.length = length\n",
        "        self.width = width\n",
        "\n",
        "    def square(self):\n",
        "        return self.length * self.width\n",
        "\n",
        "    def perimeter(self):\n",
        "        return (self.length + self.width) * 2\n",
        "\n",
        "    def infor(self):\n",
        "        return f'Длина: {self.length}, Ширина: {self.width}.'\n",
        "\n",
        "\n",
        "size = Rectangle(10, 20)\n",
        "\n",
        "\n",
        "print(size.square())\n",
        "print(size.perimeter())\n",
        "print(size.infor())"
      ],
      "metadata": {
        "id": "dG6uNPqTEAvt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b377fdc5-5f88-46d3-b3a9-d9122d3ddf8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "200\n",
            "60\n",
            "Длина: 10, Ширина: 20.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 2"
      ],
      "metadata": {
        "id": "0ct1u6lqE73j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание: Создайте мини версию банковской системы:\n",
        "\n",
        "\n",
        "Инструкции:\n",
        "\n",
        "1. Создайте класс BankAccountсо следующими атрибутами:\n",
        "    - account_holder -  владелец счета\n",
        "    - balance - баланс счета\n",
        "\n",
        "2. Реализуйте следующие методы:\n",
        "    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n",
        "    - deposit(amount): Добавьте указанную сумму к балансу.\n",
        "    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n",
        "    - get_balance(): Возврат текущего баланса.\n",
        "\n",
        "\n",
        "Создайте объект класса и продемонстрируйте его возможности"
      ],
      "metadata": {
        "id": "FOpIpcLxE-WK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class BankAccountсо:\n",
        "    balance = 0\n",
        "\n",
        "\n",
        "    def __init__(self, account_holder):\n",
        "        self.account_holder = account_holder\n",
        "        self.MyBalance = self.balance\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        self.MyBalance += amount\n",
        "        return f'Вы пополнили баланс на {self.MyBalance} рублей!'\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if self.MyBalance >= amount:\n",
        "            self.MyBalance -= amount\n",
        "            return f'Вы заплатили за покупку на {amount} рублей!'\n",
        "        else:\n",
        "            return 'У вас не достаточно средств! Проверьте баланс.'\n",
        "\n",
        "    def get_balace(self):\n",
        "        return f'Добрый день, {self.account_holder}. Ваш баланс: {self.MyBalance}.'\n",
        "\n",
        "\n",
        "people = BankAccountсо(\"Антон\")\n",
        "\n",
        "\n",
        "print(people.get_balace())\n",
        "print(people.deposit(600))\n",
        "print(people.get_balace())\n",
        "print(people.withdraw(800))\n",
        "print(people.get_balace())\n",
        "print(people.withdraw(500))\n",
        "print(people.get_balace())"
      ],
      "metadata": {
        "id": "WWXNIUrCE99W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "acb2b2dc-55da-47ed-9ad5-a70bcc70864b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Добрый день, Антон. Ваш баланс: 0.\n",
            "Вы пополнили баланс на 600 рублей!\n",
            "Добрый день, Антон. Ваш баланс: 600.\n",
            "У вас не достаточно средств! Проверьте баланс.\n",
            "Добрый день, Антон. Ваш баланс: 600.\n",
            "Вы заплатили за покупку на 500 рублей!\n",
            "Добрый день, Антон. Ваш баланс: 100.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 3"
      ],
      "metadata": {
        "id": "C5DX5Uf2FfP6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"
      ],
      "metadata": {
        "id": "0cR-MYepFgz6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "\n",
        "class hero:\n",
        "    def __init__(self, name, armor, weapon):\n",
        "        self.name = name\n",
        "        self.armor = armor\n",
        "        self.weapon = weapon\n",
        "\n",
        "class dragon:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "\n",
        "start = input('Начнем игру? ')\n",
        "\n",
        "\n",
        "if start == 'Да':\n",
        "    name = input('Выберите имя герою: ')\n",
        "    armor = input('Выберите тип брони (кольчуга, железо): ')\n",
        "    weapon = input('Выберите оружие (меч, копье, щит): ')\n",
        "    your_hero = hero(name, armor, weapon)\n",
        "    if armor == 'кольчуга':\n",
        "        armor_num = random.randint(0, 25)\n",
        "    elif armor == 'железо':\n",
        "        armor_num = random.randint(0, 35)\n",
        "    if weapon == 'меч':\n",
        "        max_damage = random.randint(20, 40)\n",
        "    elif weapon == 'копье':\n",
        "        max_damage = random.randint(25, 50)\n",
        "    elif weapon == 'щит':\n",
        "        max_damage = random.randint(10, 20)\n",
        "        armor_num += 20\n",
        "    hp = 150\n",
        "    dragon_name = input('Как вы назовете дракона? ')\n",
        "    enemy_dragon = dragon(dragon_name)\n",
        "    dragon_hp = 200\n",
        "    dragon_damage = 35\n",
        "\n",
        "\n",
        "    act = input(\"Выберите действие, которое хотите совершить: \")\n",
        "    # Выберите информацию, чтобы узнать статистику героя, или начните игру, написав \"Играть\"\n",
        "    if act == 'Информация':\n",
        "        info = f'Имя: {your_hero.name}. Броня: {your_hero.armor}. Оружие: {your_hero.weapon}. Защита: {armor_num}. Урон: {max_damage}. Здоровье: {hp}'\n",
        "        print(info)\n",
        "        # Напишите \"Играть\"\n",
        "        act = input('Следующее действие? ')\n",
        "    elif act == 'Играть':\n",
        "\n",
        "\n",
        "        print(f'Когда-то давным давно, все было хорошо, пока не пришел дракон {enemy_dragon.name}. Все боялись его и пытались прогнать, но ни у кого этого не получилось и только вы последняя надежда вашей деревни.')\n",
        "        print('Перед вами две тропинки, одна идет направо, другая налево, куда пойдете?')\n",
        "\n",
        "\n",
        "        # Выберите куда пойдете, направо или налево\n",
        "        act1 = input()\n",
        "\n",
        "\n",
        "        if act1 == 'Налево':\n",
        "            print('Вы попали в деревню, вам дали хлеб с маслом, у вас увеличилось хп!')\n",
        "            hp += 100\n",
        "            print('Ваше здоровье:', hp)\n",
        "            act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "\n",
        "\n",
        "        elif act1 == 'Направо':\n",
        "            print('Вы нашли кузницу, в которой можете улучшить оружие или броню')\n",
        "            print('Что выберете?')\n",
        "            # Выберите либо оружие, либо броню, либо ничего не берите\n",
        "            select = input()\n",
        "\n",
        "\n",
        "            if select == 'Оружие':\n",
        "                print('Кузнец ловко орудует своей кувалдой. Ваш максимальный урон увеличен.')\n",
        "                max_damage += 20\n",
        "                print(max_damage)\n",
        "                act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "\n",
        "\n",
        "            elif select == 'Броня':\n",
        "                print('Кузнец отдает вам броню, которая будет лучше, чем у вас')\n",
        "                armor_num += 25\n",
        "                print(armor_num)\n",
        "                act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "\n",
        "\n",
        "            elif select == 'Ничего':\n",
        "                print('Вы решаете, что вам ничего не нужно и идете дальше (зря)')\n",
        "                act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "        # Ответьте да или нет\n",
        "\n",
        "        if act2 == 'Идем на дракона' or act2 == 'Да':\n",
        "            print('А вот и дракон! Битва начинается!')\n",
        "\n",
        "\n",
        "            act3 = input('Начинайте атаковать! (Напишите \"Атака\", чтобы нанести урон дракону) ')\n",
        "\n",
        "\n",
        "            if act3 == 'Атака':\n",
        "                while True:\n",
        "                    print(\"Вы нанесли урон дракону!\")\n",
        "                    dragon_hp -= random.randint(10, max_damage)\n",
        "                    print('У него осталось', dragon_hp, 'здоровья.')\n",
        "\n",
        "\n",
        "                    hp -= random.randint(15, dragon_damage) * (1 - armor_num/100)\n",
        "                    print('Дракон наносит ответный удар. Ваше здоровье:', round(hp, 1))\n",
        "\n",
        "\n",
        "                    if hp <= 0:\n",
        "                        print(\"О нет! Дракон все же одержал победу, больше никто не сможет его остановить!\")\n",
        "                        print('Плохая концовка!')\n",
        "                        break\n",
        "\n",
        "\n",
        "                    elif dragon_hp <= 0:\n",
        "                        print('Ура, вы смогли убить дракона! Теперь деревня может спать спокойно!')\n",
        "                        print('Хорошая концовка!')\n",
        "                        break\n",
        "\n",
        "\n",
        "                    else:\n",
        "                        act3 = input('Продолжайте атаковать!' )\n",
        "\n",
        "\n",
        "        elif act2 == 'Нет':\n",
        "            print('Вы решили, что слишком слабы и сбежали, вашу деревню больше никто не спасет')\n",
        "            print('Секретная концовка!')\n",
        "\n",
        "\n",
        "elif start == 'Нет':\n",
        "    print(\"Спасибо, что зашли!\")"
      ],
      "metadata": {
        "id": "Oz9BZbhAFwua",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "edd7413f-fa00-417f-e5fd-28f769823261"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Начнем игру? Да\n",
            "Выберите имя герою: Никита\n",
            "Выберите тип брони (кольчуга, железо): железо\n",
            "Выберите оружие (меч, копье, щит): меч\n",
            "Как вы назовете дракона? Антон\n",
            "Выберите действие, которое хотите совершить: Играть\n",
            "Когда-то давным давно, все было хорошо, пока не пришел дракон Антон. Все боялись его и пытались прогнать, но ни у кого этого не получилось и только вы последняя надежда вашей деревни.\n",
            "Перед вами две тропинки, одна идет направо, другая налево, куда пойдете?\n",
            "Направо\n",
            "Вы нашли кузницу, в которой можете улучшить оружие или броню\n",
            "Что выберете?\n",
            "Оружие\n",
            "Кузнец ловко орудует своей кувалдой. Ваш максимальный урон увеличен.\n",
            "46\n",
            "Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? Да\n",
            "А вот и дракон! Битва начинается!\n",
            "Начинайте атаковать! (Напишите \"Атака\", чтобы нанести урон дракону) Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 188 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 134.2\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 175 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 108.1\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 156 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 90.8\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 116 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 71.0\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 87 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 55.2\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 45 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 30.7\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 33 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 10.2\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось -4 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: -1.7\n",
            "О нет! Дракон все же одержал победу, больше никто не сможет его остановить!\n",
            "Плохая концовка!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FJ1dmb7vcism"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Дополнительное задание\n"
      ],
      "metadata": {
        "id": "b_mJHXcQGI9t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задача: Система управления библиотекой\n",
        "\n",
        "**Цель**\n",
        "Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n",
        "\n",
        "**Требования**\n",
        "\n",
        "1. **Определение класса**:\n",
        "   – Создайте класс с именем «Book» со следующими атрибутами:\n",
        "     - `title`\n",
        "     - `автор`\n",
        "     - `isbn`\n",
        "     - `is_borrowed` (по умолчанию `False`)\n",
        "\n",
        "2. **Класс библиотеки**:\n",
        "   - Создайте класс с именем Library, который управляет коллекцией книг.\n",
        "   - Класс должен иметь следующие методы:\n",
        "     - `__init__(self)`: инициализирует пустой список книг.\n",
        "     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n",
        "     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n",
        "     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n",
        "     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n",
        "     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n",
        "\n",
        "3. **Взаимодействие с пользователем**:\n",
        "   - Создайте простое текстовое меню, которое позволит пользователям:\n",
        "     - Добавить книгу\n",
        "     - Одолжить книгу\n",
        "     - Вернуть книгу\n",
        "     - Список доступных книг\n",
        "     - Выйти из программы"
      ],
      "metadata": {
        "id": "pnIUdFPcGOVL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GKKmdfN8GL6f"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}