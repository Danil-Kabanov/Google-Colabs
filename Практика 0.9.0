{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Danil-Kabanov/Google-colabs/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%200.9.0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ФИО"
      ],
      "metadata": {
        "id": "8hJfL9b2l439"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Кабанов Данил Алексеевич"
      ],
      "metadata": {
        "id": "wRnqvYOkl6EX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Дисклеймер"
      ],
      "metadata": {
        "id": "weOtPwPQmgpD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "В данной практике вам необходимо применить все ваши знания по темам:\n",
        "\n",
        "- Функции\n",
        "- Словари\n",
        "- Списки\n",
        "- Множества\n",
        "- Условные конструкции\n",
        "- Запросы\n",
        "\n",
        "и все что было изучено на прошлых практических занятиях\n",
        "\n",
        "В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно"
      ],
      "metadata": {
        "id": "LznB3uscmjDa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 0"
      ],
      "metadata": {
        "id": "7nSJIqkTvC_C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Создайте функцию по нахождению уникальных элементов из двух списков\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "a = [1, 2, 3, 4]\n",
        "b = [3, 4, 5, 6]\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "exACjTiVvGUe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3, 4]\n",
        "b = [3, 4, 5, 6]\n",
        "a1 = set(a)\n",
        "b1 = set(b)\n",
        "c = a1.union(b1)\n",
        "print(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g5tbv-Im4oT0",
        "outputId": "7bc7dda5-90ee-499c-96bf-3bad326ba4ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 3, 4, 5, 6}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 1"
      ],
      "metadata": {
        "id": "SVWNlBALpCNo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Симулятор виртуального питомца\n",
        "\n",
        "Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.\n",
        "\n",
        "Требования:\n",
        "\n",
        "- Функция для усыновления питомца (имя, тип, возраст).\n",
        "- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.\n",
        "- Функция для отображения состояния питомца (голод, радость, энергия)."
      ],
      "metadata": {
        "id": "RcKA-VEqpC7f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def p(p):\n",
        "    print(p)\n",
        "\n",
        "\n",
        "def adoption():\n",
        "    # усыновление\n",
        "    name = input(\"Назовите вашего питомца: \")\n",
        "    typ = input(\"Напишите тип вашего питомца: \")\n",
        "    age = input(\"Укажите возраст питомца: \")\n",
        "    print(f\"Поздравляю! Вы усыновили питомца {name}!\")\n",
        "    global state\n",
        "    state[3] = name\n",
        "    state.append(typ)\n",
        "    state.append(age)\n",
        "\n",
        "\n",
        "def feed_the_pet(name):\n",
        "    food = input(f\"Ваш {name} хочет кушать! Чем вы хотите его/её покормить? \")\n",
        "    global state\n",
        "    state[0] = \"well-fed\"\n",
        "\n",
        "    print(f\"Вы решили покормить {food}! Ваш {name} с удовольствием полакомился этим!\")\n",
        "\n",
        "\n",
        "\n",
        "def to_state():\n",
        "    global state\n",
        "    name = state[3]\n",
        "    print(f\"Давайте оценим состояние вашего питомца {state[3]}!\")\n",
        "    if state[0] == \"hungry\":\n",
        "        print(\"Кажется ваш питомец голоден. Вам стоит покормить его!\")\n",
        "    elif state[1] == \"sad\":\n",
        "        print(f\"{name} лежит с грустной мордочкой. Может вам стоит поиграть с ним/ней.\")\n",
        "    elif state[2] == \"weakness\":\n",
        "        print(f\"{name} немного устал/а и вам стоит уложить его/её спать.\")\n",
        "    else:\n",
        "        print(f\"{name} очень довольна/лен! Вы молодцы!\")\n",
        "\n",
        "\n",
        "def play(name):\n",
        "    game = input(\"Как вы хотите с ним поиграть? \")\n",
        "    global state\n",
        "    name = state[3]\n",
        "    print(f\"Вы и ваш {name} с радостью провели время вместе!\")\n",
        "    state[1] = \"funny\"\n",
        "\n",
        "\n",
        "\n",
        "def bed():\n",
        "    global state\n",
        "    name = state[3]\n",
        "    if state[0] == \"hungry\" or state[1] == \"sad\":\n",
        "        print(f\"Пока что ещё рано ложиться спать!\")\n",
        "    else:\n",
        "        print(f\"Уже темнеет и стоит уже лечь спать. Пока {name} кушает вы стелите ему/ей небольшое одеялко, {name} лег/а на него, свернулся/ась в клубочек и уснул/а. И вам тоже стоит.\")\n",
        "        state[2] == \"energy\"\n",
        "\n",
        "\n",
        "active_game = \"on\"\n",
        "adopt = \"No pets\"\n",
        "state = [\"hungry\", \"sad\", \"weakness\", \"name\"]\n",
        "\n",
        "while active_game:\n",
        "    if adopt == \"No pets\":\n",
        "        adoption()\n",
        "        adopt = \"okey\"\n",
        "    else:\n",
        "        action = input(f\"{state[3]} ваш питомец! Вы можете покормить его, поиграть с ним или оценить его состояние: \")\n",
        "        if \"кормить\" in action:\n",
        "            feed_the_pet(state[3])\n",
        "        elif \"играть\" in action:\n",
        "            play(state[3])\n",
        "        elif \"спать\" in action:\n",
        "            bed()\n",
        "            active_game = \"end\"\n",
        "            break\n",
        "        elif \"оценить\" in action or \"состояние\" in action:\n",
        "            to_state()"
      ],
      "metadata": {
        "id": "hE7mF-HXpJLO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 2"
      ],
      "metadata": {
        "id": "qZ7qFQnmssNd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Рыцарь и дракон\n",
        "\n",
        "Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n",
        "\n",
        "Требования:\n",
        "\n",
        "- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n",
        "- Управление персонажем и мини сюжет\n",
        "- Создание дракона (Имя, информация о здоровье и уроне)\n",
        "- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n",
        "- Реализовать бой между драконом и рыцарем"
      ],
      "metadata": {
        "id": "UaccTe7ltNvg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "\n",
        "start = input('Начнем игру? ')\n",
        "\n",
        "\n",
        "if start == 'Да':\n",
        "    name = input('Выберите имя герою: ')\n",
        "    armor = input('Выберите броню для красоты: ')\n",
        "    weapon = input('Выберите оружие (меч, копье, лук, щит): ')\n",
        "    armor_num = random.randint(0, 20)\n",
        "    max_damage = random.randint(20, 40)\n",
        "    hp = 100\n",
        "    dragon_name = input('Как вы назовете дракона? ')\n",
        "    dragon_hp = 200\n",
        "    dragon_damage = 35\n",
        "\n",
        "\n",
        "    info = f'name: {name}, armor: {armor}, armor_num: {armor_num}, weapon: {weapon}, max_damage: {max_damage}, health: {hp}'\n",
        "    act = input(\"Выберите действие, которое хотите совершить: \")\n",
        "    # Выберите информацию, чтобы узнать статистику героя, или начните игру, написав \"Играть\"\n",
        "    if act == 'Информация':\n",
        "        print(info)\n",
        "        # Напишите \"Играть\"\n",
        "        info = input('Следующее действие? ')\n",
        "    elif act == 'Играть':\n",
        "\n",
        "\n",
        "        print(f'Когда-то давным давно, все было хорошо, пока не пришел дракон {dragon_name}. Все боялись его и пытались прогнать, но ни у кого этого не получилось и только вы последняя надежда вашей деревни.')\n",
        "        print('Перед вами две тропинки, одна идет направо, другая налево, куда пойдете?')\n",
        "\n",
        "\n",
        "        # Выберите куда пойдете, направо или налево\n",
        "        act1 = input()\n",
        "\n",
        "\n",
        "        if act1 == 'Налево':\n",
        "            print('Вы попали в деревню, вам дали хлеб с маслом, у вас увеличилось хп!')\n",
        "            hp += 100\n",
        "            print('Ваше здоровье:', hp)\n",
        "            act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "\n",
        "\n",
        "        elif act1 == 'Направо':\n",
        "            print('Вы нашли кузницу, в которой можете улучшить оружие или броню')\n",
        "            print('Что выберете?')\n",
        "            # Выберите либо оружие, либо броню, либо ничего не берите\n",
        "            select = input()\n",
        "\n",
        "\n",
        "            if select == 'Оружие':\n",
        "                print('Кузнец ловко орудует своей кувалдой. Ваш максимальный урон увеличен.')\n",
        "                max_damage += 20\n",
        "                print(max_damage)\n",
        "                act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "\n",
        "\n",
        "            elif select == 'Броня':\n",
        "                print('Кузнец отдает вам броню, которая будет лучше, чем у вас')\n",
        "                armor_num += 25\n",
        "                print(armor_num)\n",
        "                act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "\n",
        "\n",
        "            elif select == 'Ничего':\n",
        "                print('Вы решаете, что вам ничего не нужно и идете дальше (зря)')\n",
        "                act2 = input(\"Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? \")\n",
        "        # Ответьте да или нет\n",
        "\n",
        "        if act2 == 'Идем на дракона' or act2 == 'Да':\n",
        "            print('А вот и дракон! Битва начинается!')\n",
        "\n",
        "\n",
        "            act3 = input('Начинайте атаковать! (Напишите \"Атака\", чтобы нанести урон дракону) ')\n",
        "\n",
        "\n",
        "            if act3 == 'Атака':\n",
        "                while True:\n",
        "                    print(\"Вы нанесли урон дракону!\")\n",
        "                    dragon_hp -= random.randint(10, max_damage)\n",
        "                    print('У него осталось', dragon_hp, 'здоровья.')\n",
        "\n",
        "\n",
        "                    hp -= random.randint(15, dragon_damage) * (1 - armor_num/100)\n",
        "                    print('Дракон наносит ответный удар. Ваше здоровье:', round(hp, 1))\n",
        "\n",
        "\n",
        "                    if hp <= 0:\n",
        "                        print(\"О нет! Дракон все же одержал победу, больше никто не сможет его остановить!\")\n",
        "                        print('Плохая концовка!')\n",
        "                        break\n",
        "\n",
        "\n",
        "                    elif dragon_hp <= 0:\n",
        "                        print('Ура, вы смогли убить дракона! Теперь деревня может спать спокойно!')\n",
        "                        print('Хорошая концовка!')\n",
        "                        break\n",
        "\n",
        "\n",
        "                    else:\n",
        "                        act3 = input('Продолжайте атаковать!' )\n",
        "\n",
        "\n",
        "        elif act2 == 'Нет':\n",
        "            print('Вы решили, что слишком слабы и сбежали, вашу деревню больше никто не спасет')\n",
        "            print('Секретная концовка!')\n",
        "\n",
        "\n",
        "elif start == 'Нет':\n",
        "    print(\"Спасибо, что зашли!\")"
      ],
      "metadata": {
        "id": "LCcxp5Q0srjY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ffdb57af-219e-4545-d83b-f25ef698bd0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Начнем игру? Да\n",
            "Выберите имя герою: Александер\n",
            "Выберите броню для красоты: ДА\n",
            "Выберите оружие (меч, копье, лук, щит): Меч\n",
            "Как вы назовете дракона? Антон\n",
            "Выберите действие, которое хотите совершить: Играть\n",
            "Когда-то давным давно, все было хорошо, пока не пришел дракон Антон. Все боялись его и пытались прогнать, но ни у кого этого не получилось и только вы последняя надежда вашей деревни.\n",
            "Перед вами две тропинки, одна идет направо, другая налево, куда пойдете?\n",
            "Налево\n",
            "Вы попали в деревню, вам дали хлеб с маслом, у вас увеличилось хп!\n",
            "Ваше здоровье: 200\n",
            "Перед вами тропинка к логову дракона. Готовы ли вы с ним сразиться? Да\n",
            "А вот и дракон! Битва начинается!\n",
            "Начинайте атаковать! (Напишите \"Атака\", чтобы нанести урон дракону) Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 180 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 182.4\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 163 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 160.8\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 153 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 140.2\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 129 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 106.9\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 112 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 87.3\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 94 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 54.0\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 79 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: 23.6\n",
            "Продолжайте атаковать!Атака\n",
            "Вы нанесли урон дракону!\n",
            "У него осталось 57 здоровья.\n",
            "Дракон наносит ответный удар. Ваше здоровье: -7.8\n",
            "О нет! Дракон все же одержал победу, больше никто не сможет его остановить!\n",
            "Плохая концовка!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Задание 3\n"
      ],
      "metadata": {
        "id": "N8oFiEXol3e2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Цель - создать менеджера команды Pokémon, который позволит пользователям:\n",
        "\n",
        "- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n",
        "- Удалять покемонов из их команды.\n",
        "- Просматривать подробную информацию обо всех покемонах в команде.\n",
        "- Находить покемона по имени.\n",
        "- Устраивать тренировочный бой между двумя покемонами\n",
        "\n",
        "Для данной задачи используйте: https://pokeapi.co/\n"
      ],
      "metadata": {
        "id": "9p4WQG_Vl7wB"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NnGYp1MTqi5k"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}