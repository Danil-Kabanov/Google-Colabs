{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Danil-Kabanov/Google-colabs/blob/main/%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0%200.3.0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ФИО"
      ],
      "metadata": {
        "id": "phMKaFq3DN13"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3CWpaI7SDK8t"
      },
      "outputs": [],
      "source": [
        "Кабанов Данил Алексеевич"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Во всей практике нельзя применять библиотеки предоставляющие готовые решения!**"
      ],
      "metadata": {
        "id": "jyIy3GOgFOCe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Задача 1.**\n"
      ],
      "metadata": {
        "id": "XizmlL1RK2t3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "Типы данных Напишите программу на Python, которая принимает список чисел в качестве входных данных от пользователя, а затем выводит сумму, среднее значение и максимальное значение из списка.\n",
        "\n",
        "***Нельзя использовать: len(), min(), max(), average(), sum()***\n",
        "\n",
        "Дано:\n",
        "```\n",
        "1 2 3 4 5 6 7\n",
        "```\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "Сумма чисел: 28\n",
        "Среднее арифм.: 4.0\n",
        "Максимальное значение: 7\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "p0v6KtHTFKSd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = input('Введите несколько чисел через пробел: ')\n",
        "b = a.split()\n",
        "p = []\n",
        "leng = 0\n",
        "summa = 0\n",
        "for i in b:\n",
        "    p.append(int(i))\n",
        "for j in p:\n",
        "    summa += j\n",
        "for n in p:\n",
        "    leng += 1\n",
        "aver = summa/leng\n",
        "p = sorted(p)\n",
        "m = p[-1]\n",
        "print(f\"Сумма: {summa}, Среднее арифметическое: {aver}, Максимальное значение: {m}\")"
      ],
      "metadata": {
        "id": "0e1Virl0FpF6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4d459b6-e22d-46b6-c08a-b81f692b63da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите несколько чисел через пробел: 1 2 3 4 5 6 7\n",
            "Сумма: 28, Среднее арифметическое: 4.0, Максимальное значение: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Задача 2.**"
      ],
      "metadata": {
        "id": "uFluc5OSK0NH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Напишите программу на Python, которая принимает список слов в качестве входных данных от пользователя, а затем распечатывает список в обратном порядке.\n",
        "\n",
        "Ввод:\n",
        "\n",
        "```\n",
        "апельсин мандарин яблоко\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "яблоко мандарин апельсин\n",
        "```"
      ],
      "metadata": {
        "id": "6T8vg324GG4Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = input(\"Напишите любые слова: \")\n",
        "b = a.split()\n",
        "print(b[::-1])"
      ],
      "metadata": {
        "id": "v3AWj4ufGKox",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d2e3546-f83e-4786-87c5-71477e12c9af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Напишите любые слова: яблоко мандарин апельсин\n",
            "['апельсин', 'мандарин', 'яблоко']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Задача 3**"
      ],
      "metadata": {
        "id": "D1KkCxtIKxRx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Простой чат-бот\n",
        "Создайте простого чат-бота, который отвечает на основные запросы пользователей. Программа должна использовать условные выражения для определения намерений пользователя и последующего соответствующего ответа.\n",
        "\n",
        "Чат бот может:\n",
        "\n",
        "- помогать складывать числа\n",
        "- подсказывать фильм, музыку и тд (из заранее созданного списка)\n",
        "- создавать список дел (а также выводить его, обновлять, очищать)\n",
        "\n",
        "Интерфейс чат-бота на ваше усмотрение, это могут быть как заранее определенные команды, так и к примеру вызов команды по номеру\n",
        "\n",
        "*Реализовать без использования функций*\n",
        "\n",
        "Пример:\n",
        "\n",
        "Ввод:\n",
        "\n",
        "```\n",
        "Олег, какую мызыку посоветуешь?\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "Я бы посоветовал вам: Led Zeppelin Stairway to Heaven\n",
        "```"
      ],
      "metadata": {
        "id": "Yq8Jgb9yHvSi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "a = input('Я могу вам помочь? ')\n",
        "p = []\n",
        "if a == \"Да\" or a == \"да\":\n",
        "    t = input('Чем я могу вам помочь? ')\n",
        "    while True:\n",
        "        if t == 'Сосчитай':\n",
        "            b = int(input('Введите первое число: '))\n",
        "            c = int(input('Введите второе число: '))\n",
        "            summa = b + c\n",
        "            print(summa)\n",
        "            t = input('Что-то ещё? ')\n",
        "        elif t == 'Какую музыку посоветуешь?':\n",
        "            n = [\"Три дня дождя - 'Перезаряжай'\", \"Звери - 'Океаны'\", \"Андрей Губин - 'Облака'\"]\n",
        "            rand = random.choice(n)\n",
        "            print(f'Я бы посоветовал вам: {rand}')\n",
        "            t = input('Что-то ещё? ')\n",
        "        elif t == 'Какой фильм посоветуешь?':\n",
        "            m = [\"Тайна Коко\", \"Аватар\", \"Дэдпул и Росомаха\"]\n",
        "            rand = random.choice(m)\n",
        "            print(f'Я бы посоветовал вам: {rand}')\n",
        "            t = input('Что-то ещё? ')\n",
        "        elif t == 'Работа со списком':\n",
        "            b = input('Что будем делать со списком? ')\n",
        "            if b == 'Вывести список':\n",
        "                print(p)\n",
        "                t = input('Что-то ещё? ')\n",
        "            elif b == 'Обновить список':\n",
        "                k = input('Что вы хотите добавить? ')\n",
        "                p = k.split()\n",
        "                print(f'Список обновлен: {p}')\n",
        "                t = input('Что-то ещё? ')\n",
        "            elif b == 'Очистить список':\n",
        "                p.clear()\n",
        "                print(\"Список очищен\")\n",
        "                t = input('Что-то ещё? ')\n",
        "            elif b == 'Ничего':\n",
        "                t = input('Что-то ещё? ')\n",
        "        elif t == 'Ничего':\n",
        "            print(\"До свидания\")\n",
        "            break\n",
        "        else:\n",
        "            print('Я вас не понимаю, попробуйте ещё раз')\n",
        "            t = input()\n",
        "else:\n",
        "    print(f'До свидания')"
      ],
      "metadata": {
        "id": "fmW-tmUtINN9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90e4288a-927c-4f38-e79f-d333d5b66160"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Я могу вам помочь? да\n",
            "Чем я могу вам помочь? Работа со списком\n",
            "Что будем делать со списком? Обновить список\n",
            "Что вы хотите добавить? Картофель, морковь, лук, чеснок\n",
            "Список обновлен: ['Картофель,', 'морковь,', 'лук,', 'чеснок']\n",
            "Что-то ещё? Работа со списком\n",
            "Что будем делать со списком? Вывести список\n",
            "['Картофель,', 'морковь,', 'лук,', 'чеснок']\n",
            "Что-то ещё? Работа со списком\n",
            "Что будем делать со списком? Очистить список\n",
            "Список очищен\n",
            "Что-то ещё? Работа со списком\n",
            "Что будем делать со списком? Вывести\n",
            "Что будем делать со списком? Вывести список\n",
            "[]\n",
            "Что-то ещё? Ничего\n",
            "До свидания\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Задача 4.**\n"
      ],
      "metadata": {
        "id": "PHXBfyc6Ko7D"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Камень, ножницы, бумага\n",
        "\n",
        "Создайте игру в Камень, ножницы, бумагу, в которой пользователь может играть против компьютера. Программа должна запросить выбор пользователя, а затем сгенерировать выбор компьютера. Затем программа должна определить победителя на основе правил игры.\n",
        "\n",
        "**Этап 1:**\n",
        "\n",
        "Определение победителя\n",
        "\n",
        "**Этап 2:**\n",
        "  \n",
        "Игра до 3 побед\n",
        "\n",
        "\n",
        "Ввод для \"Этап 1\":\n",
        "\n",
        "```\n",
        "Камень\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "Компьютер: Ножницы\n",
        "Игрок: Камень\n",
        "Победа: Игрок\n",
        "```"
      ],
      "metadata": {
        "id": "jnKWeYleI0j6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "a = input('Хотите сыграть в камень ножницы бумага? Да или нет: ')\n",
        "if a == 'да' or a == 'Да':\n",
        "    u_point = 0\n",
        "    c_point = 0\n",
        "    while True:\n",
        "        u = input('Выберите, как сходите: к, н, б: ')\n",
        "        n = ['к', 'н', 'б']\n",
        "        if u in n:\n",
        "            rand = random.choice(n)\n",
        "            print(\"Компьютер сходил: \", rand)\n",
        "            if rand == 'к' and u == 'н':\n",
        "                c_point += 1\n",
        "                print('Победа комрьютера')\n",
        "            if rand == 'н' and u == 'б':\n",
        "                c_point += 1\n",
        "                print('Победа комрьютера')\n",
        "            if rand == 'б' and u == 'к':\n",
        "                c_point += 1\n",
        "                print('Победа комрьютера')\n",
        "            if u == 'к' and rand == 'н':\n",
        "                u_point += 1\n",
        "                print('Победа игрока')\n",
        "            if u == 'н' and rand == 'б':\n",
        "                u_point += 1\n",
        "                print('Победа игрока')\n",
        "            if u == 'б' and rand == 'к':\n",
        "                u_point += 1\n",
        "                print('Победа игрока')\n",
        "            if rand == u:\n",
        "                print('Ничья')\n",
        "        if c_point == 3 or u_point == 3:\n",
        "            print('Игра окончена, счёт: ', 'Компьютер: ', c_point, 'Игрок: ', u_point)\n",
        "            break\n",
        "elif a == 'нет' or a =='Нет':\n",
        "  print('Жаль...')\n",
        "else:\n",
        "  print(\"Не понимаю, что вы имеете в виду\")"
      ],
      "metadata": {
        "id": "ooIPCRe_JHkX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af2b246c-2130-4259-87d5-4df8c0ae56d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Хотите сыграть в камень ножницы бумага? Да или нет: да\n",
            "Выберите, как сходите: к, н, б: к\n",
            "Компьютер сходил:  н\n",
            "Победа игрока\n",
            "Выберите, как сходите: к, н, б: к\n",
            "Компьютер сходил:  н\n",
            "Победа игрока\n",
            "Выберите, как сходите: к, н, б: к\n",
            "Компьютер сходил:  н\n",
            "Победа игрока\n",
            "Игра окончена, счёт:  Компьютер:  0 Игрок:  3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Задача 6.**"
      ],
      "metadata": {
        "id": "Hg4FJNFbLHQO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Создайте игру \"Палач\" или \"Виселица\", в которой пользователь должен угадать слово, предлагая буквы. Программа должна выбрать случайное слово, а затем разрешить пользователю угадывать буквы. После каждого угадывания программа должна сообщать пользователю, есть ли в слове буква или нет.\n",
        "\n",
        "**Этап 1**\n",
        "Создать саму игру\n",
        "\n",
        "**Этап 2:**\n",
        "Ввести подсчет количества очков и ограничения на попытки\n",
        "\n",
        "**Этап 3:** Добавить возможность сразу угадать слово"
      ],
      "metadata": {
        "id": "OHqj3HJuLJgY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "a = input('Хотите сыграть в \"Виселицу\"? Да или нет: ')\n",
        "if a == 'да' or a == 'Да':\n",
        "    max_wrong = 6\n",
        "    words = ('математика', 'русский', 'история', 'обществознание', 'химия', 'физика', 'информатика')\n",
        "    rand = random.choice(words)\n",
        "    lenn = '_ ' * len(rand)\n",
        "    wrong = 0\n",
        "    incor = []\n",
        "    while wrong < max_wrong and lenn != rand:\n",
        "        print('Вы использовали следующие буквы: ', incor)\n",
        "        print('Сейчас слово выглядит так: ', lenn)\n",
        "        print(\"Вы ошиблись\", wrong, \"из 6\")\n",
        "        u = input('Выберите букву: ')\n",
        "        while u in incor:\n",
        "            print('Вы уже вводили эту букву', u)\n",
        "            u = input('Выберите букву: ')\n",
        "        incor.append(u)\n",
        "        if u in rand:\n",
        "            print('Да', u, 'есть в этом слове')\n",
        "            new = ''\n",
        "            for i in range(len(rand)):\n",
        "                if u == rand[i]:\n",
        "                    new += u\n",
        "                else:\n",
        "                    new += lenn[i]\n",
        "            lenn = new\n",
        "        else:\n",
        "            print('Извините, буквы', u, 'нет')\n",
        "            wrong += 1\n",
        "    if wrong == max_wrong:\n",
        "        print('Вы проиграли!')\n",
        "    else:\n",
        "        print('Вы отгадали слово!')\n",
        "    print('Загаданное слово было:', rand)"
      ],
      "metadata": {
        "id": "0N2zCYwVLiIw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "89cc7231-e52a-4ddf-c650-c4718d40800c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Хотите сыграть в \"Виселицу\"? Да или нет: Да\n",
            "Вы использовали следующие буквы:  []\n",
            "Сейчас слово выглядит так:  _ _ _ _ _ _ _ \n",
            "Вы ошиблись 0 из 6\n",
            "Выберите букву: р\n",
            "Да р есть в этом слове\n",
            "Вы использовали следующие буквы:  ['р']\n",
            "Сейчас слово выглядит так:  _ _ р _\n",
            "Вы ошиблись 0 из 6\n",
            "Выберите букву: и\n",
            "Да и есть в этом слове\n",
            "Вы использовали следующие буквы:  ['р', 'и']\n",
            "Сейчас слово выглядит так:  и _ ри_\n",
            "Вы ошиблись 0 из 6\n",
            "Выберите букву: с\n",
            "Да с есть в этом слове\n",
            "Вы использовали следующие буквы:  ['р', 'и', 'с']\n",
            "Сейчас слово выглядит так:  ис_ ри_\n",
            "Вы ошиблись 0 из 6\n",
            "Выберите букву: т\n",
            "Да т есть в этом слове\n",
            "Вы использовали следующие буквы:  ['р', 'и', 'с', 'т']\n",
            "Сейчас слово выглядит так:  ист ри_\n",
            "Вы ошиблись 0 из 6\n",
            "Выберите букву: о\n",
            "Да о есть в этом слове\n",
            "Вы использовали следующие буквы:  ['р', 'и', 'с', 'т', 'о']\n",
            "Сейчас слово выглядит так:  истори_\n",
            "Вы ошиблись 0 из 6\n",
            "Выберите букву: я\n",
            "Да я есть в этом слове\n",
            "Вы отгадали слово!\n",
            "Загаданное слово было: история\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Дополнительно: Задача 7.**\n"
      ],
      "metadata": {
        "id": "w0x3QFGzKtDD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Цифра на определенном месте:**\n",
        "\n",
        "Последовательно записан натуральный ряд чисел.\n",
        "\n",
        "Какая цифра стоит в N позиции\n",
        "\n",
        "\n",
        "Вввод:\n",
        "\n",
        "```\n",
        "Введите номер позиции: 1234567890\n",
        "```\n",
        "\n",
        "Вывод:\n",
        "\n",
        "```\n",
        "8\n",
        "```"
      ],
      "metadata": {
        "id": "QqZArcpHJxVj"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LwjYwBGcKiJ9"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}